name: Build and Push Docker Images

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: Dockerfile
            tag-suffix: ""
            platform: "linux/amd64"
            cache-scope: "gpu"
          - dockerfile: Dockerfile.cpu
            tag-suffix: "-cpu" 
            platform: "linux/amd64"
            cache-scope: "cpu"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        echo "Available disk space before cleanup:"
        df -h
        
        # Remove unnecessary packages and files
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        
        # Remove large packages we don't need
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        
        # Clean docker
        docker system prune -af
        
        echo "Available disk space after cleanup:"
        df -h

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.4
        config-inline: |
          [registry."docker.io"]
            mirrors = ["mirror.gcr.io"]

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=${{ matrix.tag-suffix }}
          type=ref,event=pr,suffix=${{ matrix.tag-suffix }}
          type=semver,pattern={{version}},suffix=${{ matrix.tag-suffix }}
          type=semver,pattern={{major}}.{{minor}},suffix=${{ matrix.tag-suffix }}
          type=semver,pattern={{major}},suffix=${{ matrix.tag-suffix }}
          type=sha,prefix={{branch}}-,suffix=${{ matrix.tag-suffix }}
          # Latest tag for main branch (GPU version only)
          type=raw,value=latest,suffix=${{ matrix.tag-suffix }},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/${{ matrix.dockerfile }}
        platforms: ${{ matrix.platform }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=${{ matrix.cache-scope }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache${{ matrix.tag-suffix }}
        cache-to: |
          type=gha,mode=max,scope=${{ matrix.cache-scope }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache${{ matrix.tag-suffix }},mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Generate image summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## Docker Images Built 🐳" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following Docker images have been built and pushed:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ${{ matrix.dockerfile }}${{ matrix.tag-suffix }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Pull the image" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest${{ matrix.tag-suffix }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Run with docker-compose" >> $GITHUB_STEP_SUMMARY
        echo "git clone https://github.com/${{ github.repository }}.git" >> $GITHUB_STEP_SUMMARY
        echo "cd $(basename ${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "docker-compose up" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: build
    permissions:
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test Docker image
      run: |
        # Test that the image can be pulled and basic imports work
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-cpu python -c "
        import sys
        print(f'Python version: {sys.version}')
        
        # Test core imports
        try:
            import torch
            print(f'PyTorch version: {torch.__version__}')
            print(f'CUDA available: {torch.cuda.is_available()}')
        except ImportError as e:
            print(f'PyTorch import failed: {e}')
            sys.exit(1)
        
        try:
            import speechbrain
            print('SpeechBrain imported successfully')
        except ImportError as e:
            print(f'SpeechBrain import failed: {e}')
            sys.exit(1)
        
        try:
            import whisper
            print('Whisper imported successfully')
        except ImportError as e:
            print(f'Whisper import failed: {e}')
            sys.exit(1)
        
        try:
            import pyannote.audio
            print('pyannote.audio imported successfully')
        except ImportError as e:
            print(f'pyannote.audio import failed: {e}')
            sys.exit(1)
        
        print('✅ All core dependencies imported successfully!')
        "

  create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, test]
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Speaker-Profiles ${{ github.ref_name }}
        body: |
          ## Speaker-Profiles ${{ github.ref_name }}
          
          ### Docker Images
          
          **GPU Version:**
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          **CPU Version:**
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-cpu
          ```
          
          ### Quick Start
          
          1. Clone the repository:
             ```bash
             git clone https://github.com/${{ github.repository }}.git
             cd $(basename ${{ github.repository }})
             ```
          
          2. Set up your environment:
             ```bash
             cp .env.template .env
             # Edit .env with your HUGGING_FACE_ACCESS_TOKEN
             ```
          
          3. Run with Docker Compose:
             ```bash
             # For GPU systems
             docker-compose up
             
             # For CPU-only systems
             docker-compose --profile cpu-only up
             ```
          
          ### What's New
          
          - Automated Docker image builds
          - GPU and CPU-only variants
          - GitHub Container Registry integration
          - Security scanning with Trivy
          
        draft: false
        prerelease: false